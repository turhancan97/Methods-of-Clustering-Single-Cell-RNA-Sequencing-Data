marker_genes = c("CST4", "SAA1", "IL32")
violin<-PlotMarkers(sce_plot, marker_genes)
# For demonstration purposes, we will use one of the 10X PBMC datasets as our test. While we have already applied quality control, normalization and clustering for this dataset, this is not strictly necessary. It is entirely possible to run SingleR() on the raw counts without any a priori quality control and filter on the annotation results at one’s leisure
library(celldex)
ref <- BlueprintEncodeData()
ref
# We call the SingleR() function to annotate each of our PBMCs with the main cell type labels from the Blueprint/ENCODE reference. This returns a DataFrame where each row corresponds to a cell in the test dataset and contains its label assignments.
library(SingleR)
pred <- SingleR(test=sce_plot, ref=ref, labels=ref$label.main)
table(pred$labels)
plotScoreHeatmap(pred)
# Alternatively, we will also use the labels in ref$label.fine, which provide more resolution at the cost of speed and increased ambiguity in the assignments.
pred2 <- SingleR(test=sce_plot, ref=ref, labels=ref$label.fine)
table(pred2$labels)
pred2
plotDeltaDistribution(pred, ncol = 4)
summary(is.na(pred$pruned.labels))
colLabels(sce_plot) <- factor(colData(sce_plot)$ClusterIDs)
tab <- table(Assigned=pred$pruned.labels, Cluster=colLabels(sce_plot))
# Adding a pseudo-count of 10 to avoid strong color jumps with just 1 cell.
library(pheatmap)
pheatmap(log2(tab+10), color=colorRampPalette(c("white", "blue"))(101))
all.markers <- metadata(pred)$de.genes
sce_plot$labels <- pred$labels
# Beta cell-related markers
library(scater)
plotHeatmap(sce_plot, order_columns_by="labels",
features=unique(unlist(all.markers$HSC)[1:30]))
plotHeatmap(sce_plot, order_columns_by="labels",
features=unique(unlist(all.markers$HSC)[31:60]))
p
load("C:/Users/Asus/Desktop/last_analysis/single-cell-project/data_PBMC_raw.RData")
library(dropClust)
library(scater)
library(SingleCellExperiment)
library(clValid)
library(ggplot2)
library(stats)
library(PCAtools)
set.seed(123)
sce <- SingleCellExperiment(list(counts=data_PBMC))
sce
dim(sce)
class(sce)
# Find expressed cell per gene
# colSums(assay(sce))
# Find expressed gene per cell
# rowSums(assay(sce))
# find non-zero counts
nonZero <- (counts(sce) > 0)
# find rows/genes with at least one non-zero count
keep <- (rowSums(nonZero) > 0)
# keep only the genes with non-zero count the SCE object
sce_2 <- sce[keep, ]
# explore sce_2
sce_2
dim(sce_2)
sce_2 <- perCellQCMetrics(sce_2)
df <- data.frame(library_sizes=sce_2$sum,number_expressed=sce_2$detected)
ggplot(df,aes(library_sizes)) + geom_histogram(binwidth=100,colour = "black",fill="orange") + xlab("Library sizes") + ylab("Number of cells") +
ggtitle("Histogram")
ggplot(df,aes(library_sizes)) + geom_histogram(aes(y= ..density..),binwidth = 100,colour = "black",fill="orange") + geom_density(alpha=.3,fill="black") +
ggtitle("Histogram + Density")
ggplot(df,aes(number_expressed)) + geom_histogram(binwidth=100,colour = "black",fill="orange") + xlab("Number of expressed genes") + ylab("Number of cells") +
ggtitle("Histogram")
ggplot(df,aes(number_expressed)) + geom_histogram(aes(y= ..density..),binwidth = 100,colour = "black",fill="orange") + geom_density(alpha=.3,fill="black") +
ggtitle("Histogram + Density")
# sce_2 <- addPerCellQC(sce_2, subsets=list(Mito=is.mito))
# colnames(colData(sce_2))
qc.lib <- sce_2$sum < 2300
qc.nexprs <- sce_2$detected < 750
# qc.mito <- sce_2$subsets_Mito_percent > 3
# discard <- qc.lib | qc.nexprs | qc.mito
# DataFrame(LibSize=sum(qc.lib),NExprs=sum(qc.nexprs), MitoProp=sum(qc.mito), Total=sum(discard))
discard <- qc.lib | qc.nexprs
# Summarize the number of cells removed for each reason.
DataFrame(LibSize=sum(qc.lib),NExprs=sum(qc.nexprs), Total=sum(discard))
qc.lib2 <- isOutlier(sce_2$sum, log=TRUE, type="lower")
qc.nexprs2 <- isOutlier(sce_2$detected, log=TRUE, type="lower")
attr(qc.lib2, "thresholds")
attr(qc.nexprs2, "thresholds")
threshold <- 1931.513
ggplot(df,aes(library_sizes)) + geom_density(colour = "blue",fill="white") +
geom_vline(xintercept=threshold,color = "red") +
xlab("Library Sizes") + ylab("Density") +
ggtitle("Distribution")
# determine the cells to keep
keep1 <- (sce_2$sum > threshold )
# tabulate the cells that were kept on the previous step
table(keep1)
threshold <- 601.4995
ggplot(df,aes(number_expressed)) + geom_density(colour = "blue",fill="white") +
geom_vline(xintercept=threshold,color = "red") +
xlab("Number of expressed genes") + ylab("Density") +
ggtitle("Distribution")
# determine the cells to keep
keep2 <- (sce_2$detected > threshold )
# tabulate the cells that were kept on the previous step
table(keep2)
discard2 <- qc.lib2 | qc.nexprs2
# Summarize the number of cells removed for each reason.
## DataFrame(LibSize=sum(qc.lib2), NExprs=sum(qc.nexprs2), MitoProp=sum(qc.mito2), Total=sum(discard2))
DataFrame(LibSize=sum(qc.lib2), NExprs=sum(qc.nexprs2), Total=sum(discard2))
dim(sce)
sce_3<-sce[,!discard] # We will use manually threshold value
dim(sce_3)
ave.counts <- rowMeans(counts(sce_3))
hist(log10(ave.counts), breaks=100, main="", col="grey80",
xlab=expression(Log[10]~"average count"))
abline(v=log10(0.01), col="blue", lwd=2, lty=2)
keep4 <- ave.counts >= 0.01
sum(keep4)
table(keep4)
sce<-sce_3[keep4, ]
dim(sce)
# sce<-FilterCells(sce, min_count = 3, ql_th = 0.001, qh_th = 1)
# sce<-FilterGenes(sce, min_count = 2, min_cell = 3)
set.seed(123)
sce_norm<-CountNormalize(sce,return_log = FALSE)
sce_norm<-logNormCounts(sce_norm) # scater
normcounts<-list(normcounts(sce_norm))
# Select Top Dispersed Genes by setting ngenes_keep.
set.seed(123)
sce_rank<-RankGenes(sce_norm, ngenes_keep = 1225)
keep_highly_variable_gene<-rowData(sce_rank)[,"HVG"]
sce_HVG<-sce_rank[keep_highly_variable_gene, ]
dispersion_norm<-rowData(sce_HVG)[,"dispersion_norm"]
# plot density
plot(density(dispersion_norm), main = 'Density - Fano Factor')
set.seed(123)
sce_sampling<-Sampling(sce_HVG, nsamples = 500, method = "sps",
optm_parameters = FALSE, pinit = 0.195, pfin = 0.9, K = 500)
keep_sampling<-colData(sce_sampling)[,"Sampling"]
sce_sampling<-sce_sampling[,keep_sampling]
# Finding Best PCA with for loop
a <- seq(100, 1000, by=50)
b <- c()
for (i in a){
set.seed(123)
sce_PCA<-RankPCAGenes(sce_sampling, top = i)
keep_PCA<-rowData(sce_PCA)[,"PCAGenes"]
sce_PCA<-sce_PCA[keep_PCA, ]
sce_cluster<-Cluster(sce_PCA, use.subsamples = TRUE, method = "louvian", k_nn = 30, conf = 0.9)
clusterIDs <- colData(sce_cluster)[,"Sample_ClusterIDs"]
data <- matrix(counts(sce_cluster),nrow = length(clusterIDs))
Dist <- dist(data,method="euclidean")
x <- dunn(clusters=as.vector(clusterIDs),distance = Dist)
b <- append(b,x)
}
dunn_line <- data.frame(x_scale=a,
y_scale=b)
ggplot(data=dunn_line, aes(x=x_scale, y=y_scale, group=1)) +
geom_line(linetype = "dashed")+
geom_point()
#Find PCA top 250 genes. This may take some time.
set.seed(123)
sce_PCA<-RankPCAGenes(sce_sampling, top = 250)
keep_PCA<-rowData(sce_PCA)[,"PCAGenes"]
sce_PCA<-sce_PCA[keep_PCA, ]
set.seed(123)
sce_cluster<-Cluster(sce_PCA, use.subsamples = TRUE, method = "louvian", k_nn = 30, conf = 0.9)
set.seed(123)
sce_plot<-PlotEmbedding(sce_cluster, embedding = "umap", spread = 10 , min_dist = 5)
plot_data = data.frame("Y1" = reducedDim(sce_plot,"umap")[,1], Y2 = reducedDim(sce_plot, "umap")[,2], color = sce_plot$ClusterIDs)
ScatterPlot(sce_plot,title = "Clusters")
clusterIDs <- colData(sce_cluster)[,"Sample_ClusterIDs"]
data <- matrix(counts(sce_cluster),nrow = length(clusterIDs))
Dist <- dist(data,method="euclidean")
x <- dunn(clusters=as.vector(clusterIDs),distance = Dist)
print(x)
DE_genes_all = FindMarkers(sce_plot, selected_clusters=NA, lfc_th = 1, q_th =0.001, nDE=30)
write.csv(DE_genes_all$genes,
file = file.path("C:/Users/Asus/Desktop/last_analysis/single-cell-project","genes_PBMC.csv"),
quote = FALSE)
p<-PlotHeatmap(sce_plot, DE_res = DE_genes_all$DE_res,nDE = 10)
p
rowData(sce_plot)$Symbol <-  rownames(sce_plot)
a<-DE_genes_all$genes
marker_genes = c("S100A12", "SCT", "MS4A1")
violin<-PlotMarkers(sce_plot, marker_genes)
# For demonstration purposes, we will use one of the 10X PBMC datasets as our test. While we have already applied quality control, normalization and clustering for this dataset, this is not strictly necessary. It is entirely possible to run SingleR() on the raw counts without any a priori quality control and filter on the annotation results at one’s leisure
library(celldex)
ref <- BlueprintEncodeData()
ref
# We call the SingleR() function to annotate each of our PBMCs with the main cell type labels from the Blueprint/ENCODE reference. This returns a DataFrame where each row corresponds to a cell in the test dataset and contains its label assignments.
library(SingleR)
pred <- SingleR(test=sce_plot, ref=ref, labels=ref$label.main)
table(pred$labels)
plotScoreHeatmap(pred)
# Alternatively, we will also use the labels in ref$label.fine, which provide more resolution at the cost of speed and increased ambiguity in the assignments.
pred2 <- SingleR(test=sce_plot, ref=ref, labels=ref$label.fine)
table(pred2$labels)
pred2
plotDeltaDistribution(pred, ncol = 4)
summary(is.na(pred$pruned.labels))
colLabels(sce_plot) <- factor(colData(sce_plot)$ClusterIDs)
tab <- table(Assigned=pred$pruned.labels, Cluster=colLabels(sce_plot))
# Adding a pseudo-count of 10 to avoid strong color jumps with just 1 cell.
library(pheatmap)
pheatmap(log2(tab+10), color=colorRampPalette(c("white", "blue"))(101))
all.markers <- metadata(pred)$de.genes
sce_plot$labels <- pred$labels
# Beta cell-related markers
library(scater)
plotHeatmap(sce_plot, order_columns_by="labels",
features=unique(unlist(all.markers$HSC)[1:30]))
plotHeatmap(sce_plot, order_columns_by="labels",
features=unique(unlist(all.markers$HSC)[31:60]))
#Find PCA top 250 genes. This may take some time.
set.seed(123)
sce_PCA<-RankPCAGenes(sce_sampling, top = 1000)
keep_PCA<-rowData(sce_PCA)[,"PCAGenes"]
sce_PCA<-sce_PCA[keep_PCA, ]
set.seed(123)
sce_cluster<-Cluster(sce_PCA, use.subsamples = TRUE, method = "louvian", k_nn = 30, conf = 0.9)
set.seed(123)
sce_plot<-PlotEmbedding(sce_cluster, embedding = "umap", spread = 10 , min_dist = 5)
plot_data = data.frame("Y1" = reducedDim(sce_plot,"umap")[,1], Y2 = reducedDim(sce_plot, "umap")[,2], color = sce_plot$ClusterIDs)
ScatterPlot(sce_plot,title = "Clusters")
DE_genes_all = FindMarkers(sce_plot, selected_clusters=NA, lfc_th = 1, q_th =0.001, nDE=30)
write.csv(DE_genes_all$genes,
file = file.path("C:/Users/Asus/Desktop/last_analysis/single-cell-project","genes_PBMC.csv"),
quote = FALSE)
p<-PlotHeatmap(sce_plot, DE_res = DE_genes_all$DE_res,nDE = 10)
p
rowData(sce_plot)$Symbol <-  rownames(sce_plot)
a<-DE_genes_all$genes
marker_genes = c("S100A12", "SCT", "MS4A1")
violin<-PlotMarkers(sce_plot, marker_genes)
library(dropClust)
library(scater)
library(SingleCellExperiment)
library(clValid)
library(ggplot2)
library(stats)
library(PCAtools)
set.seed(123)
sce <- SingleCellExperiment(list(counts=data_PBMC))
sce
dim(sce)
class(sce)
# Find expressed cell per gene
# colSums(assay(sce))
# Find expressed gene per cell
# rowSums(assay(sce))
# find non-zero counts
nonZero <- (counts(sce) > 0)
# find rows/genes with at least one non-zero count
keep <- (rowSums(nonZero) > 0)
# keep only the genes with non-zero count the SCE object
sce_2 <- sce[keep, ]
# explore sce_2
sce_2
dim(sce_2)
sce_2 <- perCellQCMetrics(sce_2)
df <- data.frame(library_sizes=sce_2$sum,number_expressed=sce_2$detected)
ggplot(df,aes(library_sizes)) + geom_histogram(binwidth=100,colour = "black",fill="orange") + xlab("Library sizes") + ylab("Number of cells") +
ggtitle("Histogram")
ggplot(df,aes(library_sizes)) + geom_histogram(aes(y= ..density..),binwidth = 100,colour = "black",fill="orange") + geom_density(alpha=.3,fill="black") +
ggtitle("Histogram + Density")
ggplot(df,aes(number_expressed)) + geom_histogram(binwidth=100,colour = "black",fill="orange") + xlab("Number of expressed genes") + ylab("Number of cells") +
ggtitle("Histogram")
ggplot(df,aes(number_expressed)) + geom_histogram(aes(y= ..density..),binwidth = 100,colour = "black",fill="orange") + geom_density(alpha=.3,fill="black") +
ggtitle("Histogram + Density")
# sce_2 <- addPerCellQC(sce_2, subsets=list(Mito=is.mito))
# colnames(colData(sce_2))
qc.lib <- sce_2$sum < 2300
qc.nexprs <- sce_2$detected < 750
# qc.mito <- sce_2$subsets_Mito_percent > 3
# discard <- qc.lib | qc.nexprs | qc.mito
# DataFrame(LibSize=sum(qc.lib),NExprs=sum(qc.nexprs), MitoProp=sum(qc.mito), Total=sum(discard))
discard <- qc.lib | qc.nexprs
# Summarize the number of cells removed for each reason.
DataFrame(LibSize=sum(qc.lib),NExprs=sum(qc.nexprs), Total=sum(discard))
load("C:/Users/Asus/Desktop/last_analysis/single-cell-project/data_PBMC_raw.RData")
library(dropClust)
library(scater)
library(SingleCellExperiment)
library(clValid)
library(ggplot2)
library(stats)
library(PCAtools)
set.seed(123)
sce <- SingleCellExperiment(list(counts=data_PBMC))
sce
dim(sce)
class(sce)
# Find expressed cell per gene
# colSums(assay(sce))
# Find expressed gene per cell
# rowSums(assay(sce))
# find non-zero counts
nonZero <- (counts(sce) > 0)
# find rows/genes with at least one non-zero count
keep <- (rowSums(nonZero) > 0)
# keep only the genes with non-zero count the SCE object
sce_2 <- sce[keep, ]
# explore sce_2
sce_2
dim(sce_2)
sce_2 <- perCellQCMetrics(sce_2)
df <- data.frame(library_sizes=sce_2$sum,number_expressed=sce_2$detected)
ggplot(df,aes(library_sizes)) + geom_histogram(binwidth=100,colour = "black",fill="orange") + xlab("Library sizes") + ylab("Number of cells") +
ggtitle("Histogram")
ggplot(df,aes(library_sizes)) + geom_histogram(aes(y= ..density..),binwidth = 100,colour = "black",fill="orange") + geom_density(alpha=.3,fill="black") +
ggtitle("Histogram + Density")
ggplot(df,aes(number_expressed)) + geom_histogram(binwidth=100,colour = "black",fill="orange") + xlab("Number of expressed genes") + ylab("Number of cells") +
ggtitle("Histogram")
ggplot(df,aes(number_expressed)) + geom_histogram(aes(y= ..density..),binwidth = 100,colour = "black",fill="orange") + geom_density(alpha=.3,fill="black") +
ggtitle("Histogram + Density")
# sce_2 <- addPerCellQC(sce_2, subsets=list(Mito=is.mito))
# colnames(colData(sce_2))
qc.lib <- sce_2$sum < 2300
qc.nexprs <- sce_2$detected < 750
# qc.mito <- sce_2$subsets_Mito_percent > 3
# discard <- qc.lib | qc.nexprs | qc.mito
# DataFrame(LibSize=sum(qc.lib),NExprs=sum(qc.nexprs), MitoProp=sum(qc.mito), Total=sum(discard))
discard <- qc.lib | qc.nexprs
# Summarize the number of cells removed for each reason.
DataFrame(LibSize=sum(qc.lib),NExprs=sum(qc.nexprs), Total=sum(discard))
qc.lib2 <- isOutlier(sce_2$sum, log=TRUE, type="lower")
qc.nexprs2 <- isOutlier(sce_2$detected, log=TRUE, type="lower")
attr(qc.lib2, "thresholds")
attr(qc.nexprs2, "thresholds")
threshold <- 1931.513
ggplot(df,aes(library_sizes)) + geom_density(colour = "blue",fill="white") +
geom_vline(xintercept=threshold,color = "red") +
xlab("Library Sizes") + ylab("Density") +
ggtitle("Distribution")
# determine the cells to keep
keep1 <- (sce_2$sum > threshold )
# tabulate the cells that were kept on the previous step
table(keep1)
threshold <- 601.4995
ggplot(df,aes(number_expressed)) + geom_density(colour = "blue",fill="white") +
geom_vline(xintercept=threshold,color = "red") +
xlab("Number of expressed genes") + ylab("Density") +
ggtitle("Distribution")
# determine the cells to keep
keep2 <- (sce_2$detected > threshold )
# tabulate the cells that were kept on the previous step
table(keep2)
discard2 <- qc.lib2 | qc.nexprs2
# Summarize the number of cells removed for each reason.
## DataFrame(LibSize=sum(qc.lib2), NExprs=sum(qc.nexprs2), MitoProp=sum(qc.mito2), Total=sum(discard2))
DataFrame(LibSize=sum(qc.lib2), NExprs=sum(qc.nexprs2), Total=sum(discard2))
dim(sce)
sce_3<-sce[,!discard] # We will use manually threshold value
dim(sce_3)
ave.counts <- rowMeans(counts(sce_3))
hist(log10(ave.counts), breaks=100, main="", col="grey80",
xlab=expression(Log[10]~"average count"))
abline(v=log10(0.01), col="blue", lwd=2, lty=2)
keep4 <- ave.counts >= 0.01
sum(keep4)
table(keep4)
sce<-sce_3[keep4, ]
dim(sce)
# sce<-FilterCells(sce, min_count = 3, ql_th = 0.001, qh_th = 1)
# sce<-FilterGenes(sce, min_count = 2, min_cell = 3)
set.seed(123)
sce_norm<-CountNormalize(sce,return_log = FALSE)
sce_norm<-logNormCounts(sce_norm) # scater
normcounts<-list(normcounts(sce_norm))
# Select Top Dispersed Genes by setting ngenes_keep.
set.seed(123)
sce_rank<-RankGenes(sce_norm, ngenes_keep = 1225)
keep_highly_variable_gene<-rowData(sce_rank)[,"HVG"]
sce_HVG<-sce_rank[keep_highly_variable_gene, ]
dispersion_norm<-rowData(sce_HVG)[,"dispersion_norm"]
# plot density
plot(density(dispersion_norm), main = 'Density - Fano Factor')
set.seed(123)
sce_sampling<-Sampling(sce_HVG, nsamples = 500, method = "sps",
optm_parameters = FALSE, pinit = 0.195, pfin = 0.9, K = 500)
keep_sampling<-colData(sce_sampling)[,"Sampling"]
sce_sampling<-sce_sampling[,keep_sampling]
# Finding Best PCA with for loop
a <- seq(100, 1000, by=50)
b <- c()
for (i in a){
set.seed(123)
sce_PCA<-RankPCAGenes(sce_sampling, top = i)
keep_PCA<-rowData(sce_PCA)[,"PCAGenes"]
sce_PCA<-sce_PCA[keep_PCA, ]
sce_cluster<-Cluster(sce_PCA, use.subsamples = TRUE, method = "louvian", k_nn = 30, conf = 0.9)
clusterIDs <- colData(sce_cluster)[,"Sample_ClusterIDs"]
data <- matrix(counts(sce_cluster),nrow = length(clusterIDs))
Dist <- dist(data,method="euclidean")
x <- dunn(clusters=as.vector(clusterIDs),distance = Dist)
b <- append(b,x)
}
dunn_line <- data.frame(x_scale=a,
y_scale=b)
ggplot(data=dunn_line, aes(x=x_scale, y=y_scale, group=1)) +
geom_line(linetype = "dashed")+
geom_point()
#Find PCA top 250 genes. This may take some time.
set.seed(123)
sce_PCA<-RankPCAGenes(sce_sampling, top = 1000)
keep_PCA<-rowData(sce_PCA)[,"PCAGenes"]
sce_PCA<-sce_PCA[keep_PCA, ]
set.seed(123)
sce_cluster<-Cluster(sce_PCA, use.subsamples = TRUE, method = "louvian", k_nn = 30, conf = 0.9)
set.seed(123)
sce_plot<-PlotEmbedding(sce_cluster, embedding = "umap", spread = 10 , min_dist = 5)
plot_data = data.frame("Y1" = reducedDim(sce_plot,"umap")[,1], Y2 = reducedDim(sce_plot, "umap")[,2], color = sce_plot$ClusterIDs)
ScatterPlot(sce_plot,title = "Clusters")
clusterIDs <- colData(sce_cluster)[,"Sample_ClusterIDs"]
data <- matrix(counts(sce_cluster),nrow = length(clusterIDs))
Dist <- dist(data,method="euclidean")
x <- dunn(clusters=as.vector(clusterIDs),distance = Dist)
print(x)
DE_genes_all = FindMarkers(sce_plot, selected_clusters=NA, lfc_th = 1, q_th =0.001, nDE=30)
write.csv(DE_genes_all$genes,
file = file.path("C:/Users/Asus/Desktop/last_analysis/single-cell-project","genes_PBMC.csv"),
quote = FALSE)
p<-PlotHeatmap(sce_plot, DE_res = DE_genes_all$DE_res,nDE = 10)
p
rowData(sce_plot)$Symbol <-  rownames(sce_plot)
a<-DE_genes_all$genes
marker_genes = c("S100A12", "SCT", "MS4A1")
violin<-PlotMarkers(sce_plot, marker_genes)
# For demonstration purposes, we will use one of the 10X PBMC datasets as our test. While we have already applied quality control, normalization and clustering for this dataset, this is not strictly necessary. It is entirely possible to run SingleR() on the raw counts without any a priori quality control and filter on the annotation results at one’s leisure
library(celldex)
ref <- BlueprintEncodeData()
ref
# We call the SingleR() function to annotate each of our PBMCs with the main cell type labels from the Blueprint/ENCODE reference. This returns a DataFrame where each row corresponds to a cell in the test dataset and contains its label assignments.
library(SingleR)
pred <- SingleR(test=sce_plot, ref=ref, labels=ref$label.main)
table(pred$labels)
plotScoreHeatmap(pred)
# Alternatively, we will also use the labels in ref$label.fine, which provide more resolution at the cost of speed and increased ambiguity in the assignments.
pred2 <- SingleR(test=sce_plot, ref=ref, labels=ref$label.fine)
table(pred2$labels)
pred2
plotDeltaDistribution(pred, ncol = 4)
summary(is.na(pred$pruned.labels))
colLabels(sce_plot) <- factor(colData(sce_plot)$ClusterIDs)
tab <- table(Assigned=pred$pruned.labels, Cluster=colLabels(sce_plot))
# Adding a pseudo-count of 10 to avoid strong color jumps with just 1 cell.
library(pheatmap)
pheatmap(log2(tab+10), color=colorRampPalette(c("white", "blue"))(101))
all.markers <- metadata(pred)$de.genes
sce_plot$labels <- pred$labels
# Beta cell-related markers
library(scater)
plotHeatmap(sce_plot, order_columns_by="labels",
features=unique(unlist(all.markers$HSC)[1:30]))
plotHeatmap(sce_plot, order_columns_by="labels",
features=unique(unlist(all.markers$HSC)[31:60]))
#Find PCA top 250 genes. This may take some time.
set.seed(123)
sce_PCA<-RankPCAGenes(sce_sampling, top = 250)
keep_PCA<-rowData(sce_PCA)[,"PCAGenes"]
sce_PCA<-sce_PCA[keep_PCA, ]
set.seed(123)
sce_cluster<-Cluster(sce_PCA, use.subsamples = TRUE, method = "louvian", k_nn = 30, conf = 0.9)
set.seed(123)
sce_plot<-PlotEmbedding(sce_cluster, embedding = "umap", spread = 10 , min_dist = 8)
plot_data = data.frame("Y1" = reducedDim(sce_plot,"umap")[,1], Y2 = reducedDim(sce_plot, "umap")[,2], color = sce_plot$ClusterIDs)
ScatterPlot(sce_plot,title = "Clusters")
set.seed(123)
sce_plot<-PlotEmbedding(sce_cluster, embedding = "umap", spread = 10 , min_dist = 9)
set.seed(123)
sce_plot<-PlotEmbedding(sce_cluster, embedding = "umap", spread = 11 , min_dist = 9)
plot_data = data.frame("Y1" = reducedDim(sce_plot,"umap")[,1], Y2 = reducedDim(sce_plot, "umap")[,2], color = sce_plot$ClusterIDs)
ScatterPlot(sce_plot,title = "Clusters")
clusterIDs <- colData(sce_cluster)[,"Sample_ClusterIDs"]
data <- matrix(counts(sce_cluster),nrow = length(clusterIDs))
Dist <- dist(data,method="euclidean")
x <- dunn(clusters=as.vector(clusterIDs),distance = Dist)
print(x)
DE_genes_all = FindMarkers(sce_plot, selected_clusters=NA, lfc_th = 1, q_th =0.001, nDE=30)
write.csv(DE_genes_all$genes,
file = file.path("C:/Users/Asus/Desktop/last_analysis/single-cell-project","genes_PBMC.csv"),
quote = FALSE)
p<-PlotHeatmap(sce_plot, DE_res = DE_genes_all$DE_res,nDE = 10)
p
p
rowData(sce_plot)$Symbol <-  rownames(sce_plot)
a<-DE_genes_all$genes
marker_genes = c("S100A12", "SCT", "MS4A1")
violin<-PlotMarkers(sce_plot, marker_genes)
# For demonstration purposes, we will use one of the 10X PBMC datasets as our test. While we have already applied quality control, normalization and clustering for this dataset, this is not strictly necessary. It is entirely possible to run SingleR() on the raw counts without any a priori quality control and filter on the annotation results at one’s leisure
library(celldex)
ref <- BlueprintEncodeData()
ref
# We call the SingleR() function to annotate each of our PBMCs with the main cell type labels from the Blueprint/ENCODE reference. This returns a DataFrame where each row corresponds to a cell in the test dataset and contains its label assignments.
library(SingleR)
pred <- SingleR(test=sce_plot, ref=ref, labels=ref$label.main)
table(pred$labels)
plotScoreHeatmap(pred)
# Alternatively, we will also use the labels in ref$label.fine, which provide more resolution at the cost of speed and increased ambiguity in the assignments.
pred2 <- SingleR(test=sce_plot, ref=ref, labels=ref$label.fine)
table(pred2$labels)
pred2
plotDeltaDistribution(pred, ncol = 4)
summary(is.na(pred$pruned.labels))
colLabels(sce_plot) <- factor(colData(sce_plot)$ClusterIDs)
tab <- table(Assigned=pred$pruned.labels, Cluster=colLabels(sce_plot))
# Adding a pseudo-count of 10 to avoid strong color jumps with just 1 cell.
library(pheatmap)
pheatmap(log2(tab+10), color=colorRampPalette(c("white", "blue"))(101))
all.markers <- metadata(pred)$de.genes
sce_plot$labels <- pred$labels
# Beta cell-related markers
library(scater)
plotHeatmap(sce_plot, order_columns_by="labels",
features=unique(unlist(all.markers$HSC)[1:30]))
plotHeatmap(sce_plot, order_columns_by="labels",
features=unique(unlist(all.markers$HSC)[31:60]))
