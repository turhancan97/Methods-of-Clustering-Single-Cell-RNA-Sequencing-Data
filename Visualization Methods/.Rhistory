setwd("C:/Users/asus/Desktop/Silezya_Proje/Proje_Dosyalari/Single-Cell-Project/Methods-of-clustering-single-cell-RNA-sequencing-data/Visualization/Project_Visualization")
setwd("C:/Users/asus/Desktop/Silezya_Proje/Proje_Dosyalari/Single-Cell-Project/Methods-of-clustering-single-cell-RNA-sequencing-data/Visualization")
library(uwot)
# See function man page for help
?umap
library(uwot)
# See function man page for help
?umap
# Non-numeric columns are ignored, so in a lot of cases you can pass a data
# frame directly to umap
iris_umap <- umap(iris, n_neighbors = 50, learning_rate = 0.5, init = "random")
# Load mnist from somewhere, e.g.
# devtools::install_github("jlmelville/snedata")
# mnist <- snedata::download_mnist()
mnist_umap <- umap(mnist, n_neighbors = 15, min_dist = 0.001, verbose = TRUE)
devtools::install_github("jlmelville/snedata")
# Load mnist from somewhere, e.g.
# devtools::install_github("jlmelville/snedata")
mnist <- snedata::download_mnist()
mnist_umap <- umap(mnist, n_neighbors = 15, min_dist = 0.001, verbose = TRUE)
# For high dimensional datasets (> 100-1000 columns) using PCA to reduce
# dimensionality is highly recommended to avoid the nearest neighbor search
# taking a long time. Keeping only 50 dimensions can speed up calculations
# without affecting the visualization much
mnist_umap <- umap(mnist, pca = 50)
# If you are only interested in visualization, `fast_sgd = TRUE` gives a much faster optimization
mnist_umap_fast_sgd <- umap(mnist, n_neighbors = 15, metric = "cosine", min_dist = 0.001, verbose = TRUE, fast_sgd = TRUE)
# Add new points to an existing embedding
mnist_train <- head(mnist, 60000)
mnist_test <- tail(mnist, 10000)
mnist_train_umap <- umap(mnist_train, verbose = TRUE, ret_model = TRUE)
mnist_test_umap <- umap_transform(mnist_test, mnist_train_umap, verbose = TRUE)
# Save the nearest neighbor data
mnist_nn <- umap(mnist, ret_nn = TRUE)
# Re-use the nearest neighor data and save a lot of time
mnist_nn_spca <- umap(mnist, nn_method = mnist_nn$nn, init = spca)
# No problem to have ret_nn = TRUE and ret_model = TRUE at the same time
# Or just use the ret_extra parameter:
mnist_nn_and_model <- umap(mnist, ret_extra = c("model", "nn"))
View(mnist)
mnist_with_fgraph <- umap(mnist, ret_extra = c("fgraph"))
View(mnist_nn_and_model)
View(mnist_with_fgraph)
head(iris, 3)
iris.data = iris[, grep("Sepal|Petal", colnames(iris))]
iris.labels = iris[, "Species"]
library(umap)
library(uwot)
iris.umap = umap(iris.data)
iris.umap
plot.iris(iris.umap, iris.labels)
install.packages("umap")
library(umap)
iris.umap = umap(iris.data)
library(umap)
iris.umap = umap(iris.data)
iris.umap
plot.iris(iris.umap, iris.labels)
plot(iris.umap, iris.labels)
plot.iris(iris.umap, iris.labels)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
BiocManager::install("M3C")
# load your omic data here as mydata
library(M3C)
umap(pollen$data,colvec=c('skyblue'))
# load your omic data here as mydata
library(M3C)
library(umap)
umap(pollen$data,colvec=c('skyblue'))
# load your omic data here as mydata
library(M3C)
library(uwot)
umap(pollen$data,colvec=c('skyblue'))
load("C:/Users/asus/Desktop/Silezya_Proje/Proje_Dosyalari/Single-Cell-Project/Methods-of-clustering-single-cell-RNA-sequencing-data/Visualization/pollen_test_data.RData")
# load your omic data here as mydata
library(M3C)
library(uwot)
umap(pollen$data,colvec=c('skyblue'))
# load your omic data here as mydata
library(M3C)
umap(pollen$data,colvec=c('skyblue'))
umap(pollen$data,labels=as.factor(pollen$celltypes),controlscale=TRUE,scale=3)
umap(pollen$data, labels=scale(as.numeric(pollen$data[row.names(pollen$data)=='GAGE4',])),
controlscale = TRUE,scale=2,legendtitle = 'GAGE4')
r <- M3C(pollen$data,method=2)
umap(pollen$data,labels=as.factor(r$assignments),printres = TRUE,printwidth = 24)
# make random data
var <- seq(1,ncol(pollen$data))
# do plot
umap(pollen$data,labels=var,controlscale=TRUE,scale=1,
legendtitle='var',printres = TRUE,printwidth = 24)
# load your omic data here as mydata
library(M3C)
tsne(pollen$data,colvec=c('gold'))
# load your omic data here as mydata
library(M3C)
tsne(pollen$data,colvec=c('yellow'))
# load your omic data here as mydata
library(M3C)
tsne(pollen$data,colvec=c('red'))
# load your omic data here as mydata
library(M3C)
tsne(pollen$data,colvec=c('blue'))
tsne(pollen$data,labels=as.factor(pollen$celltypes))
tsne(pollen$data,
labels=scale(as.numeric(pollen$data[row.names(pollen$data)=='HBG1',])),
controlscale = TRUE,scale=2)
pca(pollen$data,labels=scale(as.numeric(pollen$data[row.names(pollen$data)=='HBG1',])),
controlscale=TRUE,scale=2,text=pollen$celltypes,
textlabelsize = 2)
mnist <- snedata::download_mnist()
train <- snedata::download_mnist()
library(Rtsne)
## Curating the database for analysis with both t-SNE and PCA
Labels<-train$label
train$label<-as.factor(train$label)
## Curating the database for analysis with both t-SNE and PCA
Labels<-train$label
train$label<-as.factor(train$label)
## for plotting
colors = rainbow(length(unique(train$label)))
names(colors) = unique(train$label)
## Executing the algorithm on curated data
tsne <- Rtsne(train[,-1], dims = 2, perplexity=30, verbose=TRUE, max_iter = 500)
exeTimeTsne<- system.time(Rtsne(train[,-1], dims = 2, perplexity=30, verbose=TRUE, max_iter = 500))
## Plotting
plot(tsne$Y, t='n', main="tsne")
text(tsne$Y, labels=train$label, col=colors[train$label])
